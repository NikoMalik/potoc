// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: data_transfer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataTranfer_GetData_FullMethodName   = "/DataTranfer/GetData"
	DataTranfer_FetchData_FullMethodName = "/DataTranfer/FetchData"
)

// DataTranferClient is the client API for DataTranfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataTranferClient interface {
	// for get base64 from anyone and decode it to db and save
	GetData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataRequest, DataResponse], error)
	FetchData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataRequest, DataResponse], error)
}

type dataTranferClient struct {
	cc grpc.ClientConnInterface
}

func NewDataTranferClient(cc grpc.ClientConnInterface) DataTranferClient {
	return &dataTranferClient{cc}
}

func (c *dataTranferClient) GetData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataRequest, DataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTranfer_ServiceDesc.Streams[0], DataTranfer_GetData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataRequest, DataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataTranfer_GetDataClient = grpc.BidiStreamingClient[DataRequest, DataResponse]

func (c *dataTranferClient) FetchData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataRequest, DataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTranfer_ServiceDesc.Streams[1], DataTranfer_FetchData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataRequest, DataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataTranfer_FetchDataClient = grpc.BidiStreamingClient[DataRequest, DataResponse]

// DataTranferServer is the server API for DataTranfer service.
// All implementations must embed UnimplementedDataTranferServer
// for forward compatibility.
type DataTranferServer interface {
	// for get base64 from anyone and decode it to db and save
	GetData(grpc.BidiStreamingServer[DataRequest, DataResponse]) error
	FetchData(grpc.BidiStreamingServer[DataRequest, DataResponse]) error
	mustEmbedUnimplementedDataTranferServer()
}

// UnimplementedDataTranferServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataTranferServer struct{}

func (UnimplementedDataTranferServer) GetData(grpc.BidiStreamingServer[DataRequest, DataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedDataTranferServer) FetchData(grpc.BidiStreamingServer[DataRequest, DataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchData not implemented")
}
func (UnimplementedDataTranferServer) mustEmbedUnimplementedDataTranferServer() {}
func (UnimplementedDataTranferServer) testEmbeddedByValue()                     {}

// UnsafeDataTranferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataTranferServer will
// result in compilation errors.
type UnsafeDataTranferServer interface {
	mustEmbedUnimplementedDataTranferServer()
}

func RegisterDataTranferServer(s grpc.ServiceRegistrar, srv DataTranferServer) {
	// If the following call pancis, it indicates UnimplementedDataTranferServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataTranfer_ServiceDesc, srv)
}

func _DataTranfer_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataTranferServer).GetData(&grpc.GenericServerStream[DataRequest, DataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataTranfer_GetDataServer = grpc.BidiStreamingServer[DataRequest, DataResponse]

func _DataTranfer_FetchData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataTranferServer).FetchData(&grpc.GenericServerStream[DataRequest, DataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataTranfer_FetchDataServer = grpc.BidiStreamingServer[DataRequest, DataResponse]

// DataTranfer_ServiceDesc is the grpc.ServiceDesc for DataTranfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataTranfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataTranfer",
	HandlerType: (*DataTranferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _DataTranfer_GetData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchData",
			Handler:       _DataTranfer_FetchData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data_transfer.proto",
}
